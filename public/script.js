document.addEventListener('DOMContentLoaded', () => {
    const cityInput = document.getElementById('city-input');
    const searchButton = document.getElementById('search-button');
    const geolocationButton = document.getElementById('geolocation-button');
    const cityNameElement = document.getElementById('city-name');
    const weatherIcon = document.getElementById('weather-icon');
    const temperatureElement = document.getElementById('temperature');
    const weatherDescriptionElement = document.getElementById('weather-description');
    const humidityElement = document.getElementById('humidity');
    const windSpeedElement = document.getElementById('wind-speed');
    const pressureElement = document.getElementById('pressure');
    const visibilityElement = document.getElementById('visibility');
    const cloudsElement = document.getElementById('clouds');
    const uvIndexElement = document.getElementById('uv-index');
    const aiAdviceElement = document.getElementById('ai-advice');
    const errorMessage = document.getElementById('error-message');
    const loader = document.getElementById('loader');
    const logOutput = document.getElementById('log-output');
    const citySuggestions = document.getElementById('city-suggestions');
    const hourlyChartCanvas = document.getElementById('hourly-chart').getContext('2d');
    const dailyChartCanvas = document.getElementById('daily-chart').getContext('2d');

    let hourlyChart;
    let dailyChart;

    let isFetchingAIAdvice = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ fetchAIAdvice

    const HUMOROUS_STARTS = [
        "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è...", "–ù—É —á—Ç–æ, –Ω–∞—Ä–æ–¥, —Å–µ–≥–æ–¥–Ω—è...", "–ê –≤–æ—Ç –∏ –Ω–µ...", "–°–Ω–æ–≤–∞ —ç—Ç–∏...", "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è...",
        "–¢–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞...", "–ù–µ–±–µ—Å–Ω–∞—è –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è —Ä–µ—à–∏–ª–∞...", "–ö–æ—Ä–æ—á–µ, —Ä–µ–±–∑—è...", "–°–ª—ã—Ö–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç—å?",
        "–ì–æ—Ç–æ–≤—å—Ç–µ –≤–∞–ª–µ–Ω–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ...", "–ï—Å–ª–∏ –≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ—Ç–∞–º, —Ç–æ...", "–í –æ–±—â–µ–º, —Ç–∞–∫–æ–µ...",
        "–ù–∞ —É–ª–∏—Ü–µ —Ç–≤–æ—Ä–∏—Ç—Å—è...", "–ê —É –≤–∞—Å —Ç–∞–∫ –±—ã–≤–∞–ª–æ, —á—Ç–æ...", "–õ–∞–π–∫, –µ—Å–ª–∏ —É –≤–∞—Å —Ç–æ–∂–µ...",
        "–¢–æ–ª—å–∫–æ –±–µ–∑ –æ–±–∏–¥, –Ω–æ...", "–ñ–¥—É –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö, –∞ –ø–æ–∫–∞...", "–ü–æ–¥–ø–∏—à–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å...",
        "–≠—Ç–æ —à–µ–¥–µ–≤—Ä –ø—Ä–æ—Å—Ç–æ, –∫–æ–≥–¥–∞...", "–Ø –≤ –∞—Ö—É–µ —Å —Ç–æ–≥–æ, —á—Ç–æ...", "–°–º–µ—à–Ω–æ –¥–æ —Å–ª—ë–∑, –∫–æ–≥–¥–∞...",
        "–ü—Ä–æ—Å—Ç–æ –Ω–µ—Ç —Å–ª–æ–≤, –æ–¥–Ω–∏...", "–ö–∞–∫ —Å–∫–∞–∑–∞–ª –∫–ª–∞—Å—Å–∏–∫...", "–ê –ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ –≤ –¥–µ—Ç—Å—Ç–≤–µ...",
        "–ù—É —á—Ç–æ, –ø–æ–≥–Ω–∞–ª–∏...", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ (–¥–µ–Ω—å/–Ω–æ—á—å), –∞ —É –Ω–∞—Å —Ç—É—Ç...", "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏...",
        "–í–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ–≥–Ω–æ–∑!", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å...", "–ù–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ, –Ω–æ...", "–ö–∞–∫ –±—ã —Å–∫–∞–∑–∞–ª –ì–∞—Ä—Ä–∏—Å...",
        "–î–∂–æ—Ä–¥–∂ –±—ã —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ...", "–î–∂–µ–π –±—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∑–∞–º–µ—Ç–∏–ª...", "–ê –≤–æ—Ç –∏...",
        "–°–Ω–æ–≤–∞ –≤—ã...", "–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç...", "–ü–æ–Ω–µ—Å–ª–∞—Å—å...", "–ù—É —á—Ç–æ, –Ω–∞—Ä–æ–¥?", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ (–Ω–æ—á—å/–¥–µ–Ω—å)..."
    ];

    const HUMOROUS_MIDDLES = [
        "–∫–∞–∫ –≤—Å–µ–≥–¥–∞, –ø—Ä–µ–ø–æ–¥–Ω–æ—Å–∏—Ç —Å—é—Ä–ø—Ä–∏–∑—ã", "—Ä–µ—à–∏–ª–∞ —É—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–º", "–≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, –±—É–¥—Ç–æ", "–Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ",
        "—Å–ª–æ–≤–Ω–æ —Å–æ—à–ª–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü", "—Å–ª–æ–≤–Ω–æ —Å–±–µ–∂–∞–ª–∞ –∏–∑", "—Å–ª–æ–≤–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞–º –Ω–∞", "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ",
        "–≤—ã–∑—ã–≤–∞–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Å", "–∫–∞–∫ –±—É–¥—Ç–æ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª", "—Å–ª–æ–≤–Ω–æ –∑–∞–±—ã–ª–∞, —á—Ç–æ –Ω–∞ –¥–≤–æ—Ä–µ",
        "—Å–ª–æ–≤–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞—Å", "–∫–∞–∫ –±—É–¥—Ç–æ —Ä–µ—à–∏–ª–∞, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞–º",
        "–Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ –ø–æ—Ä–∞", "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ", "—Å–ª–æ–≤–Ω–æ –∏–∑–¥–µ–≤–∞–µ—Ç—Å—è –Ω–∞–¥",
        "—Å–ª–æ–≤–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å", "—Å–ª–æ–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤—ã –ª–∏ –º—ã –∫", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–ê –≤–æ—Ç –∏...",
        "—Å–ª–æ–≤–Ω–æ —à–µ–ø—á–µ—Ç –Ω–∞ —É—Ö–æ", "—Å–ª–æ–≤–Ω–æ –∫—Ä–∏—á–∏—Ç –≤–æ –≤—Å–µ –≥–æ—Ä–ª–æ", "—Å–ª–æ–≤–Ω–æ –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç –Ω–∞–º",
        "—Å–ª–æ–≤–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–†–µ–±–∑—è, —Å–µ–≥–æ–¥–Ω—è...", "—Å–ª–æ–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–ê –≤—ã –≥–æ—Ç–æ–≤—ã –∫...",
        "—Å–ª–æ–≤–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ", "—Å–ª–æ–≤–Ω–æ –¥—Ä–∞–∑–Ω–∏—Ç –Ω–∞—Å", "—Å–ª–æ–≤–Ω–æ –∏–≥—Ä–∞–µ—Ç —Å –Ω–∞–º–∏ –≤",
        "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–î–µ—Ä–∂–∏—Ç–µ—Å—å, —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç...", "—Å–ª–æ–≤–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ",
        "—Å–ª–æ–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞–º, —á—Ç–æ –∂–∏–∑–Ω—å - —ç—Ç–æ", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–ù–µ –∂–¥–∞–ª–∏?'",
        "—Å–ª–æ–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–ê —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏?'", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫...'",
        "—Å–ª–æ–≤–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ'",
        "—Å–ª–æ–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–ö—Ç–æ –ø–æ–Ω—è–ª, —Ç–æ—Ç –ø–æ–Ω—è–ª?'", "—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç: '–¢–æ–ª—å–∫–æ –±–µ–∑ –æ–±–∏–¥, –Ω–æ...'"
    ];

    const HUMOROUS_ENDS = [
        ", —Ç–∞–∫ —á—Ç–æ –¥–µ—Ä–∂–∏—Ç–µ—Å—å! üòÇ", ", –∞ —É –≤–∞—Å —Ç–∞–∫ –±—ã–ª–æ? ü•≤", ", –∫—Ç–æ –ø–æ–Ω—è–ª, —Ç–æ—Ç –ø–æ–Ω—è–ª. üíÄ",
        ", –ª–∞–π–∫, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω! ‚ô•Ô∏è", ", –∂–¥—É –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö! ü§ù", ", –ø–æ–¥–ø–∏—à–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å! üò≥",
        ", —ç—Ç–æ —à–µ–¥–µ–≤—Ä –ø—Ä–æ—Å—Ç–æ! üíÄ", ", —è –≤ –∞—Ö—É–µ —Å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ! üò≥", ", —Å–º–µ—à–Ω–æ –¥–æ —Å–ª—ë–∑! üò≠",
        ", –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —Å–ª–æ–≤! üíÄ", ", –∫–∞–∫ —Å–∫–∞–∑–∞–ª –∫–ª–∞—Å—Å–∏–∫: '...'. üßê", ", –∞ –ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ –≤ –¥–µ—Ç—Å—Ç–≤–µ...? ü•≤",
        ", –Ω—É —á—Ç–æ, –ø–æ–≥–Ω–∞–ª–∏? üòÇ", ", –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ (–¥–µ–Ω—å/–Ω–æ—á—å)! üåû", ", –∏ —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã",
        ", –≤–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ–≥–Ω–æ–∑! üö®", ", —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! üéÅ", ", –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ! üôè",
        ", –∫–∞–∫ –±—ã —Å–∫–∞–∑–∞–ª –ì–∞—Ä—Ä–∏—Å: '...'. üßê", ", –î–∂–æ—Ä–¥–∂ –±—ã —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞–ª: '...'. üé©",
        ", –î–∂–µ–π –±—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∑–∞–º–µ—Ç–∏–ª: '...'. üòâ", ", –∞ –≤–æ—Ç –∏ –Ω–µ—Ç! üòÇ", ", —Å–Ω–æ–≤–∞ –≤—ã! üëã",
        ", –≤–æ—Ç —Ç–∞–∫ –≤–æ—Ç! ü§∑", ", –ø–æ–Ω–µ—Å–ª–∞—Å—å! üöÄ", ", –Ω—É —á—Ç–æ, –Ω–∞—Ä–æ–¥? üßë‚Äçü§ù‚Äçüßë",
        ", –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ (–Ω–æ—á—å/–¥–µ–Ω—å)! üåû", ", –∏ —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã", ", –≤–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ–≥–Ω–æ–∑! üö®",
        ", —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! üéÅ", ", –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ! üôè", ", –∫–∞–∫ –±—ã —Å–∫–∞–∑–∞–ª –ì–∞—Ä—Ä–∏—Å: '...'. üßê",
        ", –î–∂–æ—Ä–¥–∂ –±—ã —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞–ª: '...'. üé©", ", –î–∂–µ–π –±—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∑–∞–º–µ—Ç–∏–ª: '...'. üòâ"
    ];

    const WEATHERAPI_KEY = 'a3306185ebb44865923194249252908'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á WeatherAPI.com

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    function logMessage(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const formattedMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
        console.log(formattedMessage); // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å

        if (typeof DEBUG_MODE !== 'undefined' && DEBUG_MODE) {
            logOutput.textContent += formattedMessage + '\n';
            logOutput.scrollTop = logOutput.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    function displayError(message) {
        logMessage(`–û–®–ò–ë–ö–ê: ${message}`, 'error');
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    function hideError() {
        errorMessage.style.display = 'none';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∞–¥–µ—Ä–∞
    function showLoader() {
        loader.style.display = 'block';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ª–æ–∞–¥–µ—Ä–∞
    function hideLoader() {
        loader.style.display = 'none';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
    function updateBackground(weatherCondition, isDay) {
        const body = document.body;
        body.className = ''; // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã
        if (!isDay) {
            body.classList.add('weather-night');
            return;
        }
        switch (weatherCondition.toLowerCase()) {
            case 'clear':
                body.classList.add('weather-clear');
                break;
            case 'clouds':
                body.classList.add('weather-clouds');
                break;
            case 'rain':
            case 'drizzle':
                body.classList.add('weather-rain');
                break;
            case 'snow':
                body.classList.add('weather-snow');
                break;
            case 'thunderstorm':
                body.classList.add('weather-thunderstorm');
                break;
            case 'mist':
            case 'fog':
            case 'haze':
                body.classList.add('weather-mist');
                break;
            default:
                body.classList.add('weather-clear'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    async function fetchWeather(query, type = 'city') {
        hideError();
        showLoader();
        logMessage(`–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è: ${JSON.stringify(query)} (—Ç–∏–ø: ${type})`);
        try {
            let url;
            const daysForecast = 3; // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ WeatherAPI.com
            if (type === 'city') {
                url = `https://api.weatherapi.com/v1/forecast.json?key=${WEATHERAPI_KEY}&q=${query}&days=${daysForecast}&lang=ru&aqi=no`;
            } else if (type === 'coords') {
                url = `https://api.weatherapi.com/v1/forecast.json?key=${WEATHERAPI_KEY}&q=${query.latitude},${query.longitude}&days=${daysForecast}&lang=ru&aqi=no`;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.');
            }
            logMessage(`URL –∑–∞–ø—Ä–æ—Å–∞ WeatherAPI.com: ${url}`);

            const response = await fetch(url);
            logMessage(`–û—Ç–≤–µ—Ç WeatherAPI.com —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const errorData = await response.json();
                logMessage(`–û—à–∏–±–∫–∞ WeatherAPI.com: ${JSON.stringify(errorData)}`, 'error');
                throw new Error(`–û—à–∏–±–∫–∞ WeatherAPI.com: ${response.statusText}`);
            }
            const data = await response.json();
            logMessage('–î–∞–Ω–Ω—ã–µ WeatherAPI.com –ø–æ–ª—É—á–µ–Ω—ã:', 'debug');
            // logMessage(JSON.stringify(data, null, 2), 'debug'); // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞ –¥–∞–Ω–Ω—ã—Ö

            displayWeather(data);
            updateCharts(data); // –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
            logMessage('–í—ã–∑–æ–≤ fetchAIAdvice –∏–∑ fetchWeather.', 'debug');
            fetchAIAdvice(data); // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        } catch (error) {
            displayError(error.message);
            logMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: ${error.message}`, 'error');
        } finally {
            hideLoader();
            logMessage('–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω.');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    function displayWeather(data) {
        const current = data.current;
        const location = data.location;
        // const forecastDay = data.forecast.forecastday[0].day; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å

        const isDay = current.is_day === 1;
        cityNameElement.textContent = location.name;
        weatherIcon.src = `https:${current.condition.icon}`;
        temperatureElement.textContent = `${Math.round(current.temp_c)}¬∞C`;
        weatherDescriptionElement.textContent = current.condition.text;
        humidityElement.textContent = `${current.humidity}%`;
        windSpeedElement.textContent = `${current.wind_kph} –∫–º/—á`;
        pressureElement.textContent = `${current.pressure_mb} –º–±–∞—Ä`;
        visibilityElement.textContent = `${current.vis_km} –∫–º`;
        cloudsElement.textContent = `${current.cloud}%`;
        uvIndexElement.textContent = `${current.uv}`;

        updateBackground(current.condition.text, isDay);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    function updateCharts(data) {
        const hourlyData = data.forecast.forecastday[0].hour;
        const dailyForecast = data.forecast.forecastday;

        // –ü–æ—á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        const hourlyLabels = hourlyData.map(hour => new Date(hour.time_epoch * 1000).getHours() + ':00');
        const hourlyTemps = hourlyData.map(hour => hour.temp_c);
        const hourlyPrecip = hourlyData.map(hour => hour.precip_mm);

        if (hourlyChart) {
            hourlyChart.destroy();
        }
        hourlyChart = new Chart(hourlyChartCanvas, {
            type: 'line',
            data: {
                labels: hourlyLabels,
                datasets: [{
                    label: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                    data: hourlyTemps,
                    borderColor: 'rgb(255, 99, 132)',
                    tension: 0.1,
                    yAxisID: 'temperature'
                },
                {
                    label: '–û—Å–∞–¥–∫–∏ (–º–º)',
                    data: hourlyPrecip,
                    borderColor: 'rgb(54, 162, 235)',
                    tension: 0.1,
                    yAxisID: 'precipitation'
                }]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                stacked: false,
                scales: {
                    temperature: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'
                        }
                    },
                    precipitation: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: '–û—Å–∞–¥–∫–∏ (–º–º)'
                        },
                        grid: {
                            drawOnChartArea: false, // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∞–≤–æ–π –æ—Å–∏
                        },
                    }
                }
            }
        });

        // –ü–æ–º–∏–¥–Ω–µ–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        const dailyLabels = dailyForecast.map(day => new Date(day.date_epoch * 1000).toLocaleDateString('ru-RU', { weekday: 'short' }));
        const dailyMaxTemps = dailyForecast.map(day => day.day.maxtemp_c);
        const dailyMinTemps = dailyForecast.map(day => day.day.mintemp_c);

        if (dailyChart) {
            dailyChart.destroy();
        }
        dailyChart = new Chart(dailyChartCanvas, {
            type: 'bar',
            data: {
                labels: dailyLabels,
                datasets: [{
                    label: '–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                    data: dailyMaxTemps,
                    backgroundColor: 'rgba(255, 99, 132, 0.5)'
                }, {
                    label: '–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                    data: dailyMinTemps,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'
                        }
                    }
                }
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
    async function fetchCitySuggestions(query) {
        if (query.length < 2) {
            citySuggestions.innerHTML = '';
            return;
        }
        logMessage(`–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è: "${query}"`);
        try {
            const url = `https://api.weatherapi.com/v1/search.json?key=${WEATHERAPI_KEY}&q=${query}`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤: ${response.statusText}`);
            }
            const data = await response.json();
            logMessage('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', 'debug');
            // logMessage(JSON.stringify(data, null, 2), 'debug');

            citySuggestions.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            data.slice(0, 20).forEach(city => { // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 20 –≥–æ—Ä–æ–¥–æ–≤
                const option = document.createElement('option');
                option.value = `${city.name}, ${city.country}`;
                citySuggestions.appendChild(option);
            });
        } catch (error) {
            logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤: ${error.message}`, 'error');
        }
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
    async function typeWriterEffect(element, text, speed) {
        element.textContent = ''; // –û—á–∏—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∏
        let i = 0;
        return new Promise(resolve => {
            const typingInterval = setInterval(() => {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                } else {
                    clearInterval(typingInterval);
                    resolve();
                }
            }, speed);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    function generateCombinedHumorousMessage() {
        const start = HUMOROUS_STARTS[Math.floor(Math.random() * HUMOROUS_STARTS.length)];
        const middle = HUMOROUS_MIDDLES[Math.floor(Math.random() * HUMOROUS_MIDDLES.length)];
        const end = HUMOROUS_ENDS[Math.floor(Math.random() * HUMOROUS_ENDS.length)];
        return `${start} ${middle}${end}`;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π AI
    async function fetchAIAdvice(weatherData) {
        logMessage('fetchAIAdvice: –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞.', 'debug');

        if (isFetchingAIAdvice) {
            logMessage('fetchAIAdvice: –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥.', 'warn');
            return;
        }
        isFetchingAIAdvice = true;

        let currentTypingIntervalId; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–µ—á–∞—Ç–∏
        let intervalId; // –î–ª—è —Å–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π

        const startTypingHumorousMessage = async () => {
            if (currentTypingIntervalId) {
                clearInterval(currentTypingIntervalId); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            }

            const messageToType = generateCombinedHumorousMessage();
            const typingSpeed = 2000 / messageToType.length; // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –≤—Å—é —Ñ—Ä–∞–∑—É

            aiAdviceElement.textContent = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π
            let i = 0;
            currentTypingIntervalId = setInterval(() => {
                if (i < messageToType.length) {
                    aiAdviceElement.textContent += messageToType.charAt(i);
                    i++;
                } else {
                    clearInterval(currentTypingIntervalId);
                    currentTypingIntervalId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
                }
            }, typingSpeed);
        };

        startTypingHumorousMessage(); // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        intervalId = setInterval(startTypingHumorousMessage, 3000); // –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

        logMessage('–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π AI.');
        try {
            const current = weatherData.current;
            const prompt = `–ù—É —á—Ç–æ, –Ω–∞—Ä–æ–¥? –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç—å! üòÇ –£ –Ω–∞—Å —Ç—É—Ç: ${Math.round(current.temp_c)}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(current.feelslike_c)}¬∞C, ${current.condition.text}, –≤–µ—Ç–µ—Ä ${current.wind_kph} –∫–º/—á. –ï—Å–ª–∏ –≤—ã –Ω–µ –ì–∞—Ä—Ä–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—á–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç, —Ç–æ –º–∞—Å—Ç —Ö—ç–≤ ‚Äî —ç—Ç–æ –∑–æ–Ω—Ç –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ê —É –≤–∞—Å —Ç–∞–∫ –±—ã–ª–æ? üíÄ`;
            logMessage(`–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini: ${prompt}`, 'debug');

            const response = await fetch('/api/gemini', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt })
            });
            logMessage(`–û—Ç–≤–µ—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ (Gemini) —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const errorData = await response.json();
                logMessage(`–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ (Gemini): ${JSON.stringify(errorData)}`, 'error');
                throw new Error(`–û—à–∏–±–∫–∞ AI: ${response.statusText}`);
            }

            const data = await response.json();
            logMessage('–î–∞–Ω–Ω—ã–µ AI –ø–æ–ª—É—á–µ–Ω—ã:', 'debug');
            logMessage(JSON.stringify(data, null, 2), 'debug'); // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞ –¥–∞–Ω–Ω—ã—Ö

            clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
            if (currentTypingIntervalId) {
                clearInterval(currentTypingIntervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—á–∞—Ç—å
            }
            // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            setTimeout(() => {
                aiAdviceElement.textContent = data.text;
            }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 0.3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∞
        } catch (error) {
            clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
            if (currentTypingIntervalId) {
                clearInterval(currentTypingIntervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—á–∞—Ç—å
            }
            aiAdviceElement.textContent = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI. ${error.message}`; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
            logMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π AI: ${error.message}`, 'error');
        } finally {
            isFetchingAIAdvice = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            logMessage('–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π AI –∑–∞–≤–µ—Ä—à–µ–Ω.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    cityInput.addEventListener('input', () => {
        const query = cityInput.value.trim();
        fetchCitySuggestions(query);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    searchButton.addEventListener('click', () => {
        const city = cityInput.value.trim();
        logMessage(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏". –í–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥: "${city}"`);
        if (city) {
            fetchWeather(city);
        } else {
            displayError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
            logMessage('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø—É—Å—Ç–æ–µ.', 'warn');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    geolocationButton.addEventListener('click', () => {
        logMessage('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ".');
        if (navigator.geolocation) {
            showLoader();
            logMessage('–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
            navigator.geolocation.getCurrentPosition(
                position => {
                    hideLoader();
                    const { latitude, longitude } = position.coords;
                    logMessage(`–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: –®–∏—Ä–æ—Ç–∞ ${latitude}, –î–æ–ª–≥–æ—Ç–∞ ${longitude}`);
                    fetchWeather({ latitude, longitude }, 'coords');
                },
                error => {
                    hideLoader();
                    displayError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. ' + error.message);
                    logMessage(`–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${error.message}`, 'error');
                }
            );
        } else {
            displayError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.');
            logMessage('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º.', 'warn');
        }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ú–æ—Å–∫–≤—ã)
    logMessage('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞) –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.');
    fetchWeather('–ú–æ—Å–∫–≤–∞');
});
